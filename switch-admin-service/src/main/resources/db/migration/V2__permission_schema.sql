-- Create PERMISSION table
CREATE TABLE PERMISSION (
    PERMISSION_ID VARCHAR2(12) PRIMARY KEY,
    NAME VARCHAR2(100) NOT NULL,
    DESCRIPTION VARCHAR2(500),
    IS_ACTIVE NUMBER(1) DEFAULT 1 NOT NULL,
    CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP NOT NULL,
    UPDATED_AT TIMESTAMP(6),
    CONSTRAINT UK_PERMISSION_NAME UNIQUE (NAME),
    CONSTRAINT CHK_PERMISSION_ACTIVE CHECK (IS_ACTIVE IN (0, 1))
);

CREATE INDEX IDX_PERMISSION_ACTIVE ON PERMISSION(IS_ACTIVE);


-- Create sequence for ID generation
CREATE SEQUENCE PERMISSION_SEQ
    START WITH 1
    INCREMENT BY 1
    CACHE 20
    NOCYCLE
    ORDER;

-- Create trigger for ID generation (format: PERM00000001)
CREATE OR REPLACE TRIGGER PERMISSION_BI
BEFORE INSERT ON PERMISSION
FOR EACH ROW
BEGIN
    IF :NEW.PERMISSION_ID IS NULL THEN
        SELECT 'PERM' || LPAD(PERMISSION_SEQ.NEXTVAL, 8, '0')
        INTO :NEW.PERMISSION_ID
        FROM DUAL;
    END IF;

    -- Force consistent timestamps
    :NEW.CREATED_AT := SYSTIMESTAMP;
END;
/

-- Create update timestamp trigger
CREATE OR REPLACE TRIGGER PERMISSION_BU
BEFORE UPDATE ON PERMISSION
FOR EACH ROW
BEGIN
    :NEW.UPDATED_AT := SYSTIMESTAMP;
END;
/

-- Table and column comments
COMMENT ON TABLE PERMISSION IS 'Stores system permissions and access rights';
COMMENT ON COLUMN PERMISSION.PERMISSION_ID IS 'Primary key in PERM00000001 format';
COMMENT ON COLUMN PERMISSION.NAME IS 'Unique name of the permission (e.g., CREATE_USER)';
COMMENT ON COLUMN PERMISSION.DESCRIPTION IS 'Detailed description of what the permission allows';
COMMENT ON COLUMN PERMISSION.IS_ACTIVE IS 'Active status flag (1=active, 0=inactive)';
COMMENT ON COLUMN PERMISSION.CREATED_AT IS 'Timestamp when permission was created';
COMMENT ON COLUMN PERMISSION.UPDATED_AT IS 'Timestamp when permission was last updated';


