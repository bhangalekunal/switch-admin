-- Create ROLE_PERMISSION join table
CREATE TABLE ROLE_PERMISSION (
    ROLE_ID VARCHAR2(12) NOT NULL,
    PERMISSION_ID VARCHAR2(12) NOT NULL,
    PRIMARY KEY (ROLE_ID, PERMISSION_ID),
    CONSTRAINT FK_ROLE_PERM_ROLE FOREIGN KEY (ROLE_ID)
        REFERENCES ROLE(ROLE_ID) ON DELETE CASCADE,
    CONSTRAINT FK_ROLE_PERM_PERM FOREIGN KEY (PERMISSION_ID)
        REFERENCES PERMISSION(PERMISSION_ID) ON DELETE CASCADE
);

COMMENT ON TABLE ROLE_PERMISSION IS 'Mapping between roles and permissions';
COMMENT ON COLUMN ROLE_PERMISSION.PERMISSION_ID IS 'Reference to PERMISSION table';
COMMENT ON COLUMN ROLE_PERMISSION.ROLE_ID IS 'Reference to ROLE table';

-- Create indexes for performance
CREATE INDEX IDX_ROLE_PERMISSION_ROLE ON ROLE_PERMISSION(ROLE_ID);
CREATE INDEX IDX_ROLE_PERMISSION_PERM ON ROLE_PERMISSION(PERMISSION_ID);

-- Create USER_ACCOUNT_ROLE join table (corrected to use USER_ACCOUNT)
CREATE TABLE USER_ACCOUNT_ROLE (
    USER_ID VARCHAR2(12) NOT NULL,
    ROLE_ID VARCHAR2(12) NOT NULL,
    PRIMARY KEY (USER_ID, ROLE_ID),
    CONSTRAINT FK_USER_ACCOUNT_ROLE_USER FOREIGN KEY (USER_ID)
        REFERENCES USER_ACCOUNT(USER_ID) ON DELETE CASCADE,
    CONSTRAINT FK_USER_ACCOUNT_ROLE_ROLE FOREIGN KEY (ROLE_ID)
        REFERENCES ROLE(ROLE_ID) ON DELETE CASCADE
);

--  comments
COMMENT ON TABLE USER_ACCOUNT_ROLE IS 'Mapping between user accounts and roles';
COMMENT ON COLUMN USER_ACCOUNT_ROLE.USER_ID IS 'Reference to USER_ACCOUNT table';
COMMENT ON COLUMN USER_ACCOUNT_ROLE.ROLE_ID IS 'Reference to ROLE table';

-- Create indexes for performance
CREATE INDEX IDX_USER_ACCOUNT_ROLE_USER_ID ON USER_ACCOUNT_ROLE(USER_ID);
CREATE INDEX IDX_USER_ACCOUNT_ROLE_ROLE_ID ON USER_ACCOUNT_ROLE(ROLE_ID);
